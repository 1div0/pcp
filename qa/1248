#!/bin/sh
# PCP QA Test No. 1248
# pmlogctl - cond-create
#
# Copyright (c) 2020 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

if pmlogctl -c default status 2>/dev/null | grep ' default ' >/dev/null
then
    _notrun "at least one pmlogger already defined for \"default\" class"
fi

_cleanup()
{
    echo "_cleanup: ..." >>$seq.full
    cd $here
    $sudo pmlogctl -f -c default destroy localhost >>$seq.full 2>&1
    $sudo pmlogctl -af -c $seq destroy >>$seq.full 2>&1
    $sudo rm -rf $tmp $tmp.*
    for dir in $seq-localhost pmfind-localhost
    do
	[ -d "$PCP_ARCHIVE_DIR/$dir" ] && $sudo rm -rf "$PCP_ARCHIVE_DIR/$dir"
    done
}

status=1	# failure is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15

localhost=`hostname`

_filter()
{
    tee -a $seq.full \
    | sed \
	-e '/^# created by pmlogctl/s/ on .*/ on DATE/' \
	-e "s;$tmp\.;TMP.;g" \
	-e "s;$PCP_BINADM_DIR/;PCP_BINADM_DIR/;g" \
	-e "s;$PCP_ARCHIVE_DIR/;PCP_ARCHIVE_DIR/;g" \
	-e "s;$PCP_TMP_DIR/;PCP_TMP_DIR/;g" \
	-e "s;$PCP_TMPFILE_DIR/pmlogctl\.[^/]*;PCP_TMPFILE_DIR/pmlogctl.XXXXX;g" \
	-e "s;$PCP_ETC_DIR/;PCP_ETC_DIR/;g" \
    # end
}

# Build filter for any existing non-qa and non-primary pmlogger instances.
# The "pmcd Host" and "Class" fields from the pmlogctl status output
# should suffice to uniquely identify each.
#
pmlogctl status 2>&1 \
| $PCP_AWK_PROG >$tmp.awk '
NR == 1	{ next }
NF >= 5	{ if ($3 == "primary") next
	  print "$1 == \"" $1 "\" && $3 == \"" $3 "\" { next }"
	}
END	{ print "{ print }" }'

# Note status command output order is non-deterministic, hence the sort
# at the end
#
_filter_status()
{
    tee -a $seq.full \
    | $PCP_AWK_PROG -f $tmp.awk \
    | sed >$tmp.tmp \
	-e "/^`hostname` .* primary /d" \
	-e 's/[ 	][ 	]*/ /g' \
	-e 's/2[0-9][0-9][0-9][01][0-9][0-3][0-9]\...\.[^ ]*/<archivename>/' \
	-e "s/^$localhost /LOCALHOSTNAME /" \
	-e "s/ $seq / <seq> /" \
	-e 's/ [0-9][0-9]* / <pid> /' \
    # end
    head -1 $tmp.tmp
    sed -e '1d' $tmp.tmp | LC_COLLATE=POSIX sort
}

cat <<End-of-File >$tmp.policy.head
class:
$seq
ident:
$seq-%h
control:
\$version=1.1
%h n n PCP_ARCHIVE_DIR/%i -c $tmp.config
End-of-File

cat <<End-of-File >$tmp.config
log mandatory on default { pmcd.pmlogger }
End-of-File

# real QA test starts here
echo '== -NV expect pmfind class to be used' | tee -a $seq.full
pmlogctl -NV cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p, no create: section, expect on instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
pmlogctl -NV -p $tmp.policy cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c, no create: section, expect no instance to be created' | tee -a $seq.full
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo "create:" >>$tmp.policy.head

echo | tee -a $seq.full
echo '== -NV -p -c exists() false, expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "exists(hinv.foo)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c exists() true (leaf in PMNS), expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "exists(sample.bin)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c exists() true (non-leaf in PMNS), expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "exists(sample)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c values() false (bad metric), expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "values(hinv.foo.bar)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c values() false (numval < 1), expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "values(sample.bad.novalues)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c values() true (leaf & singular), expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "values(sample.long)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c values() true (leaf & indom), expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "values(sample.bin)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c values() true (non-leaf & indom), expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "values(disk.dev)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c condition() false (bad expr), expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "condition(hinv.ncpu >)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c condition() false (singular value == 0), expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "condition(hinv.ncpu < 1)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c condition() false (indom value < 0), expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "condition(-sample.bin)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c condition() true (singular value > 0), expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "values(hinv.ndisk > 0 ? hinv.ndisk : 1 + hinv.ncpu > 0 ? hinv.ndisk : 1)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c hostname() false, expect no instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "hostname(.*[fF][oO][oO].*)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

echo | tee -a $seq.full
echo '== -NV -p -c hostname() true, expect instance to be created' | tee -a $seq.full
cp $tmp.policy.head $tmp.policy
echo "hostname((local|LOCAL)host)" >>$tmp.policy
pmlogctl -NV -p $tmp.policy -c $seq cond-create localhost 2>&1 | _filter

status=0
exit
